name: 'XCode-Deploy'
description: 'Archive, Export, and Upload a build to App Store Connect (TestFlight)'
author: 'Vincent Frascello'
branding: 
  icon: 'upload-cloud'
  color: 'yellow'
  
inputs:
  xcode-version: 
    description: 'The version of XCode to use. Defaults to the latest stable version.'
    requred: false
    default: 'latest-stable'
  configuration: 
    description: 'Configuration (default: Release)'
    required: true
    default: 'Release'
  project_folder: 
    description: 'Folder with a project'
    required: true
    default: ''
  scheme: 
    description: 'Leave blank and Action will search for default scheme.'
    required: false
    default: ''
  path-to-export-options:
    description: 'Relative path and filename to ExportOptions.plist'
    required: true
    default: 'ExportOptions.plist'
  update-build: 
    description: 'Sets Build Number to # of commits.'
    required: true
    default: true
    type: choice
    options:
    - true
    - false
  install-pods: 
    description: 'Run Pod Install'
    required: true
    default: false
    type: choice
    options:
    - true
    - false
  resolve-package-dependencies: 
    description: 'Resolve Package Dependencies'
    required: true
    default: false
    type: choice
    options:
    - true
    - false
  distribution-certificate-p12:
    description: 'base64 representation of the distribution certificate.'
    required: true
  distribution-certificate-password:
    description: 'password to unlock the distribution certificate.'
    required: true
  app-store-provisioning-profile:
    description: 'base64 representation of the provisioning profile.'
    required: true    
  auth-key-id:
    description: 'App Store Connect API Auth Key ID.'
    required: true
  auth-key-issuer-id:
    description: 'App Store Connect API Issuer ID.'
    required: true
  auth-key-p8:
    description: 'base64 representation of the App Store Connect AuthKey.'
    required: true
  retention-days:
    description: 'Period for artifacts storage. Artifacts will be kept during this time, in days'
    required: true
  keychain_name:
    description: 'Name for Keychain that will be used'
    required: false
    default: "git_actions_build_keychain"

runs: 
  using: 'composite'
  steps:
    - name: Sanitize input
      shell: bash
      env:
        SCHEME: ${{ inputs.scheme }}
        CONFIGURATION: ${{ inputs.configuration }}
        PATH_TO_EXPORT_OPTIONS: ${{ inputs.path-to-export-options }}
      run: |
        echo "[XCode-Deploy]: Checking Input for invalid characters..."
        if [[ "$SCHEME" == ${SCHEME//[^a-zA-Z0-9_\.- ]/} ]] && \
        [[ "$CONFIGURATION" == ${CONFIGURATION//[^a-zA-Z0-9_\.- ]/} ]] && \
        [[ "$PATH_TO_EXPORT_OPTIONS" == ${PATH_TO_EXPORT_OPTIONS//^[a-zA-Z0-9](?:[a-zA-Z0-9 ._-]*[a-zA-Z0-9])?\.[a-zA-Z0-9_-]+$/} ]]; then
        echo "Inputs OK"
          exit 0
          else
          echo "Bad Inputs"
        exit 1
        fi
    - name: Determine File To Build
      shell: bash
      env:
        PROJECT_FOLDER: ${{ inputs.project_folder }}
      run: |
        cd $PROJECT_FOLDER
        echo "[XCode-Deploy]: Determining file to build..."
        if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" \
        && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; \
        else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
        file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
        echo "TYPE=$filetype_parameter" >> $GITHUB_ENV
        echo "FILE_TO_BUILD=$PROJECT_FOLDER$file_to_build" >> $GITHUB_ENV
        echo "PROJECT_NAME=$(echo "$file_to_build" | cut -f 1 -d '.')" >> $GITHUB_ENV
    - name: Setup Pods
      if: inputs.install-pods == 'true'
      shell: bash
      run: |
        echo "[XCode-Deploy]: Installing Pods..."
        pod install
    - name: Resolve Package Dependencies
      if: inputs.resolve-package-dependencies == 'true'
      shell: bash
      env:
        PROJECT_FOLDER: ${{ inputs.project_folder }}
      run: |
        cd $PROJECT_FOLDER
        echo "[XCode-Deploy]: Resolving Package Dependencies..."
        xcodebuild -project ${{ env.PROJECT_NAME }}.xcodeproj -resolvePackageDependencies #-clonedSourcePackagesDirPath .
    - name: Setup Scheme
      shell: bash
      run: |
        echo "[XCode-Deploy]: Searching for default Scheme..."
        if [ "${{ inputs.scheme }}" == "" ]; then
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $scheme | cat >scheme
          echo "[XCode-Deploy]: Using default scheme: $scheme..."
        else 
          echo "[XCode-Deploy]: Using provided Scheme: ${{ inputs.scheme }}"
          scheme=${{ inputs.scheme }}
        fi
        echo "SCHEME=$scheme" >> $GITHUB_ENV
    - name: Import Certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        keychain: ${{ inputs.keychain_name }}
        p12-file-base64: ${{ inputs.distribution-certificate-p12 }}
        p12-password: ${{ inputs.distribution-certificate-password }}
    - name: Install App Store Profile
      uses: akiojin/install-provisioning-profile-github-action@v1.0
      with:
        base64: ${{ inputs.app-store-provisioning-profile }}
    - name: Select Xcode
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: ${{ inputs.xcode-version }}
    - name: Increment Build Number
      shell: bash
      if: inputs.update-build == 'true'
      run: |
          echo "[XCode-Deploy]: Updating Build Number to commit depth..."
          count=`git rev-list --count HEAD`
          xcrun agvtool new-version -all $count
    - name: Print contents of mobile provision project_folder
      shell: bash
      run: |
        ls ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Build and Archive
      uses: sersoft-gmbh/xcodebuild-action@v3.1.0
      with:
        action: archive
        ${{ env.TYPE }}: ${{ env.FILE_TO_BUILD }}
        scheme: ${{ env.SCHEME }}
        sdk: iphoneos
        build-settings: >
          -archivePath ${{ env.PROJECT_NAME }}.xcarchive
        derived-data-path: build/derivedData
        destination: generic/platform=iOS
        configuration: ${{ inputs.configuration }}
        output-formatter: |
          xcpretty
    - name: Get App Store Connect API Key
      uses: timheuer/base64-to-file@v1.2.4
      with:
        fileName: AuthKey_${{ inputs.auth-key-id }}.p8
        fileDir: ${{ github.workspace }}/private_keys
        encodedString: ${{ inputs.auth-key-p8 }}
    - name: Export Xcode archive
      shell: bash
      run: |
        echo "[XCode-Deploy]: Exporting archive using xcodebuild..."
        xcodebuild -exportArchive -verbose \
        -sdk iphoneos \
        -archivePath ${{ github.workspace }}/${{ env.PROJECT_NAME }}.xcarchive  \
        -exportOptionsPlist ${{ github.workspace }}/${{ inputs.path-to-export-options }} \
        -exportPath ${{ github.workspace }} \          -authenticationKeyIssuerID ${{ inputs.auth-key-issuer-id }} \
        -authenticationKeyID ${{ inputs.auth-key-id }} \
        -authenticationKeyPath ${{ github.workspace }}/private_keys/AuthKey_${{ inputs.auth-key-id }}.p8 \
    - name: List generated files
      shell: bash
      run: |
        ls ${{ github.workspace }}
    - name: Upload artifacts to Github Actions storage
      uses: actions/upload-artifact@v4
      with:
        name: buildArtifacts
        path: |
          DaveAndBusters.xcarchive
          DaveAndBusters.ipa
          Packaging.log
        retention-days: ${{ inputs.retention-days }}
    - name: Upload to App Store Connect
      shell: bash
      run: |
        echo "[XCode-Deploy]: Uploading archive using altool..."
        xcrun altool --upload-app -f ${{ github.workspace }}/${{ env.PROJECT_NAME }}.ipa -t iOS \
        --apiIssuer ${{ inputs.auth-key-issuer-id }} --apiKey ${{ inputs.auth-key-id }}
    - name: Delete keychain
      if: always() # Always run this step to ensure the keychain is properly disposed of
      shell: bash
      run: |
        security delete-keychain "${{ env.keychain_name }}".keychain
    - name: Cleanup
      shell: bash
      run: |
        echo "[XCode-Deploy]: Removing private_keys folder..."
        rm  -rf ${{ github.workspace }}/private_keys || true
